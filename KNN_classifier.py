# Supervised Classification with k-fold Cross Validation
# imports
import numpy
import time
import random
import pickle
from sklearn.cross_validation import StratifiedKFold # make sure that sklearn is version 0.17
from sklearn.metrics import confusion_matrix
from sklearn.neighbors import KNeighborsClassifier as knn
import matplotlib.pyplot as plt

# Get features and labels

# Files location
features_file = 'out_dir/features.npy' # npy features file name
labels_file = 'out_dir/labels.npy'  # npy labels file name
no_imgs_file = 'out_dir/no_imgs.npy'  # npy vector with number of images in each family
list_fams_file = 'out_dir/list_fams.npy'# npy vector with names of families
model_save_file = 'out_dir/model.sav' # Here we will save the knn trained model , at the end

# Import features and labels saved vectors ==== getting X(BIG) and y(little)
X = numpy.load(features_file) # Features
y = numpy.load(labels_file) # Labels : int present families from 0 to 24
no_imgs = numpy.load(no_imgs_file) # Number of malware in each family :: a vector
list_fams = numpy.load(list_fams_file)
print 'Features and Labels are correctly imported !'

# Data preparation
n_samples, n_features = X.shape
p = range(n_samples)  # an index array, 0:n_samples
random.seed(random.random())
random.shuffle(p)  # the index array is now shuffled
X, y = X[p], y[p]  # both the arrays are now shuffled

kfold = 10  # Number of folds : should be at least 2


skf = StratifiedKFold(y, kfold, shuffle=True)
skfind = [None] * len(skf)
cnt = 0
for train_index in skf:
    skfind[cnt] = train_index
    cnt = cnt + 1

# Initializing the Confusion Matrix
conf_mat = numpy.zeros((len(no_imgs), len(no_imgs)))
n_neighbors = 1;

# _________________________Train the model_______________________________________
# kfold Cross Validation, kfold = 10 (for example)
for i in range(kfold):
    print 'ROUND : ' , i
    train_indices = skfind[i][0]
    test_indices = skfind[i][1]
    malware_classifier = []
    malware_classifier = knn(n_neighbors, weights='distance')
    X_train = X[train_indices]
    y_train = y[train_indices]
    X_test = X[test_indices]
    y_test = y[test_indices]

    # Training
    tic = time.time()
    malware_classifier.fit(X_train, y_train)
    toc = time.time()
    print "training time= ", toc - tic  # roughly 2.5 secs :: pour moi 2.9s

    # Testing
    y_predict = []
    tic = time.time()
    y_predict = malware_classifier.predict(X_test)  # output is labels and not indices
    toc = time.time()
    print "testing time = ", toc - tic  # roughly 0.3 secs

    # Compute confusion matrix for each round
    cm = []
    cm = confusion_matrix(y_test, y_predict)
    conf_mat = conf_mat + cm

#print 'Confusion Matrix:{}'.format(conf_mat)
# Viewing the confusion matrix
plt.imshow(conf_mat, interpolation='nearest')
plt.title('Confusion matrix')
plt.colorbar()
plt.show()
#plt.savefig('confusion_matrix1.png') # dont need to save it now

conf_mat2 = numpy.around(conf_mat,decimals=2) # rounding to display in figure
plt.imshow(conf_mat2,interpolation='nearest')
for x in xrange(len(list_fams)):
    for y in xrange(len(list_fams)):
        plt.annotate(str(conf_mat2[x][y]),xy=(y,x),ha='center',va='center')

plt.xticks(range(len(list_fams)),list_fams,rotation=90,fontsize=11)
plt.yticks(range(len(list_fams)),list_fams,fontsize=11)
plt.title('Confusion matrix')
plt.colorbar()
plt.show()
#plt.savefig('confusion_matrix2.png')

# calculating score :: Returns the mean accuracy on the given test data and labels.
score = malware_classifier.score(X_test, y_test)
print 'Test score is ', score

score = malware_classifier.score(X_test, y_predict)
print 'predicted test score is ', score

score = malware_classifier.score(X_train, y_train)
print 'Train score is ', score


# save the trained model to disk
pickle.dump(malware_classifier, open(model_save_file, 'wb'))
print 'KNN Model saved successfuly'

# load the model from disk
'''
loaded_model = pickle.load(open(model_save_file, 'rb'))
result = loaded_model.score(X_test, y_test)
print(result)
'''