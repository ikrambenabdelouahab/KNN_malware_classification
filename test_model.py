# Test the model on new isolated DB : TestDB
# Samples in TestDB does not exist in the trainDB
# imports
import pickle
import glob, os
import leargist
import numpy
from PIL import Image
from prettytable import PrettyTable
from sklearn.metrics import confusion_matrix, accuracy_score, classification_report
import matplotlib.pyplot as plt

# Files location
testfile = 'test_DB'
filename = 'out_dir/model.sav'

# Load malware families name list
list_fams = numpy.load('out_dir/list_fams.npy')

# Define function to convert any label to its family name
def from_label_to_family_name(given_label):
    for i in range(len(list_fams)):
        if i == given_label :
            return list_fams[i]
    return 'Sorry, Label not found !!'

# Find pictures
os.chdir(testfile)
list = os.listdir(os.getcwd())
num = len(glob.glob('*.png'))  # assuming the images are stored as 'png'
num_list = []
num_list = glob.glob('*.png')
print 'We have ', num,' files ;  called :' # number of test samples
print num_list
os.chdir('..')


#________________Load malware classifier model______________________________________________
loaded_model = pickle.load(open(filename, 'rb'))
print 'KNN model successfully loaded'

#________________Getting features from collected images_____________________________________
Image.Image.tostring = Image.Image.tobytes
X = numpy.zeros((num, 320))
cnt = 0

os.chdir(testfile)
# Passing by images :: one by one to get features
for j in range(len(num_list)):
    im = Image.open(num_list[j])
    im1 = im.resize((64, 64), Image.ANTIALIAS);  # for faster computation
    des = leargist.color_gist(im1)
    X[cnt] = des[0:320]
    cnt = cnt + 1

os.chdir('..')

#__________________Predict malware family_________________________________________________
y_predict = [] # represent the output label of the corresponding feature input
y_predict = loaded_model.predict(X)  # output is labels and not indices
print 'Predicted Labels are : ', y_predict

#_______________Showing result in a good looking table____________________________________
table = PrettyTable()
table.field_names = ["Predicted label", "Family name" , "Image"]
for i in range(len(num_list)):
    family_name = from_label_to_family_name(y_predict[i])
    table.add_row([y_predict[i], family_name, num_list[i]])
print table    # print results

# Real labels done manually to calculate score
y = []
y = [ 3, 23,  9, 18, 11, 20, 17,  1, 15, 16,  6,  4,  3, 5,
      22, 11, 14, 10, 19, 24,  1, 21, 17, 16,  2, 14, 23, 22,
      6,  8, 19, 12,  7,  2,  4, 10, 0, 13, 18,  0,  8,  7,
      12,  5, 15, 20, 13, 21,  9, 24]

#print 'Real labels are : ', y


score = loaded_model.score(X, y)
print 'predicted score is ', score
# score = 0.92 : 92% of predictions are correct
# in the example 4/50 are false predictions
#print "Accuracy score is: ", accuracy_score(y,y_predict)
print "Classification Report: "
print classification_report(y,y_predict)

conf_mat = confusion_matrix(y, y_predict)
plt.imshow(conf_mat, interpolation='nearest')
plt.title('Confusion matrix')
plt.colorbar()
plt.show()
